name: CI Pipeline

on:
  push:
    branches: [main]
  pull_request:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt
          npm ci
      - name: Run linters
        env:
          PYTHONWARNINGS: error
        run: make lint

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt
          npm ci
          npm ci --prefix frontend/admin-dashboard
          npx playwright install --with-deps
          python -m pip install -e .
      - name: Run Flow
        run: npm run flow
      - name: Run tests
        env:
          PYTHONWARNINGS: error
        run: make test

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build images
        run: make docker-build
      - name: Push images
        env:
          REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
          TAG: ${{ github.sha }}
        run: make docker-push REGISTRY=$REGISTRY TAG=$TAG

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.29.0'
      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: 'v3.12.3'
      - name: Deploy to cluster
        env:
          REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
          TAG: ${{ github.sha }}
          ENV: prod
        run: make helm-deploy REGISTRY=$REGISTRY TAG=$TAG ENV=$ENV

  docs:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt \
            sphinx docformatter flake8 flake8-docstrings myst-parser sphinxcontrib-mermaid openapi-spec-validator
      - name: Generate OpenAPI specs
        run: python scripts/generate_openapi.py
      - name: Validate OpenAPI specs
        run: openapi-spec-validator openapi/*.json
      - name: Build documentation
        run: make -C docs html
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: docs/_build/html
      - name: Deploy documentation
        uses: actions/deploy-pages@v1
