name: Tests

on:
  push:
    branches: [main, stable]
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        python-version: ['3.11', '3.12']
        node-version: ['18', '20']
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '${{ matrix.python-version }}'
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: '${{ matrix.node-version }}'
          cache: 'npm'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt
          npm ci
          npm ci --prefix frontend/admin-dashboard
          npx playwright install --with-deps
          python -m pip install -e .
      - name: Run Flow
        run: npm run flow
      - name: Check formatting
        run: npm run format:check --prefix frontend/admin-dashboard
      - name: Run tests
        run: |
          docker compose -f docker-compose.dev.yml -f docker-compose.test.yml up -d
          python -m pytest -W error -vv
          npm test
          npm run test:e2e
          docker compose -f docker-compose.dev.yml -f docker-compose.test.yml down
      - name: Smoke test docker compose services
        run: ./scripts/smoke_compose.sh
      - name: Upload Python coverage
        uses: actions/upload-artifact@v4
        with:
          name: python-coverage-${{ matrix.python-version }}
          path: coverage.xml
      - name: Upload frontend coverage
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage-${{ matrix.node-version }}
          path: frontend/admin-dashboard/coverage
      - name: Upload coverage to Codecov
        if: ${{ secrets.CODECOV_TOKEN != '' }}
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: |
            coverage.xml
            frontend/admin-dashboard/coverage/lcov.info

  publish:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
      - name: Publish microservice packages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for pyproj in backend/*/pyproject.toml; do
            svc=$(dirname "$pyproj")
            echo "Publishing $svc"
            poetry config repositories.github "https://pypi.pkg.github.com/${GITHUB_REPOSITORY_OWNER}"
            cd "$svc"
            poetry publish --build -r github -u "$GITHUB_ACTOR" -p "$GITHUB_TOKEN"
            cd -
          done
