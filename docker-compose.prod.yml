version: '3.8'
services:
  postgres:
    image: ghcr.io/example/postgres:latest
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: app
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "user"]
      interval: 10s
      retries: 5

  pgbouncer:
    image: ghcr.io/example/pgbouncer:latest
    ports:
      - "6432:6432"
    depends_on:
      - postgres

  redis:
    image: ghcr.io/example/redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 5

  zookeeper:
    image: bitnami/zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: 'yes'
    volumes:
      - zookeeper-data:/bitnami/zookeeper
    healthcheck:
      test: ["CMD", "zkServer.sh", "status"]
      interval: 10s
      retries: 5

  kafka:
    image: ghcr.io/example/kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: 'yes'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: 'true'
    depends_on:
      - zookeeper
    volumes:
      - kafka-data:/bitnami/kafka
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      retries: 5

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
    depends_on:
      - kafka

  kafka-init:
    image: bitnami/kafka:latest
    depends_on:
      - kafka
    volumes:
      - ./docker/kafka/create-topics.sh:/create-topics.sh:ro
    entrypoint: ["/bin/bash", "/create-topics.sh"]
    restart: 'no'

  minio:
    image: ghcr.io/example/minio:latest
    ports:
      - "9000:9000"
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: password
    command: server /data
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 10s
      retries: 5

  mockup-generation:
    image: ghcr.io/example/mockup-generation:latest
    profiles:
      - gpu
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: [gpu]
    secrets:
      - openai_api_key
      - stability_ai_api_key
      - huggingface_token

  monitoring:
    image: ghcr.io/example/monitoring:latest
    command: python -m monitoring.main
    profiles:
      - monitoring
    ports:
      - "8000:8000"
    environment:
      LOKI_URL: http://loki:3100
    depends_on:
      - loki
    labels:
      - "prometheus.scrape=true"
      - "prometheus.path=/metrics"
      - "prometheus.port=8000"

  loki:
    image: grafana/loki:latest
    profiles:
      - monitoring
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml

  prometheus:
    image: prom/prometheus:latest
    profiles:
      - monitoring
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro

  grafana:
    image: grafana/grafana:latest
    profiles:
      - monitoring
    ports:
      - "3000:3000"

  api-gateway:
    image: ghcr.io/example/api-gateway:latest
    ports:
      - "8001:8000"
    environment:
      LOKI_URL: http://loki:3100
    depends_on:
      - kafka
      - redis
      - postgres

  scoring-engine:
    image: ghcr.io/example/scoring-engine:latest
    ports:
      - "5002:5002"
    depends_on:
      - postgres

  marketplace-publisher:
    image: ghcr.io/example/marketplace-publisher:latest
    ports:
      - "8003:8000"
    depends_on:
      - postgres
      - redis

  signal-ingestion:
    image: ghcr.io/example/signal-ingestion:latest
    ports:
      - "8004:8000"
    depends_on:
      - postgres
      - kafka

  feedback-loop:
    image: ghcr.io/example/feedback-loop:latest
    ports:
      - "8005:8000"

  admin-dashboard:
    image: ghcr.io/example/admin-dashboard:latest
    ports:
      - "3000:3000"
    depends_on:
      - api-gateway

  orchestrator:
    image: ghcr.io/example/orchestrator:latest
    ports:
      - "3001:3000"
volumes:
  postgres-data:
  redis-data:
  zookeeper-data:
  kafka-data:
  minio-data:
secrets:
  secret_key:
    file: ./secrets/secret_key.txt
  openai_api_key:
    file: ./secrets/openai_api_key.txt
  stability_ai_api_key:
    file: ./secrets/stability_ai_api_key.txt
  huggingface_token:
    file: ./secrets/huggingface_token.txt
